Prometheus

1) Install Helm (cf blog)
 
wget https://get.helm.sh/helm-v3.0.3-linux-amd64.tar.gz
tar xzvf helm-v3.0.3-linux-amd64.tar.gz
cp linux-amd64/helm /usr/bin/

2) Install Prometheus (cf blog)
 
kubectl create namespace monitoring
helm repo add stable https://kubernetes-charts.storage.googleapis.com
helm repo update
helm install prom-operator stable/prometheus-operator  --namespace monitoring

3) Expose Prometheus

# Blog  kubectl port-forward -n monitoring prometheus-prom-operator-prometheus-0 9090

kubectl delete -n monitoring svc prom-operator-prometheus-o-prometheus

apiVersion: v1
kind: Service
metadata:
  labels:
    app: prometheus-operator-prometheus
    chart: prometheus-operator-8.12.3
    heritage: Helm
    release: prom-operator
    self-monitor: "true"
  name: prom-operator-prometheus-o-prometheus
  namespace: monitoring
spec:
  ports:
  - name: web
    port: 80
    protocol: TCP
    targetPort: 9090
  selector:
    app: prometheus
    prometheus: prom-operator-prometheus-o-prometheus
  sessionAffinity: None
  type: LoadBalancer



4) Create a Service Monitor for Trident (cf blog)

#####servicemonitor.yaml#####
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: trident-sm
  namespace: monitoring
  labels:
    release: prom-operator
spec:
  jobLabel: trident
  selector:
    matchLabels:
      app: controller.csi.trident.netapp.io
  namespaceSelector:
    matchNames:
    - trident
  endpoints:
  - port: metrics
    interval: 15s
 
kubectl create -f servicemonitor.yaml

http://192.168.0.140/targets

cat <<EOF > prometheus.yaml
{
    "apiVersion": 1,
    "datasources": [{
        "access": "proxy",
        "editable": false,
        "name": "prometheus",
        "orgId": 1,
        "type": "prometheus",
        "url": "http://192.168.0.140",
        "version": 1
    }]
}
EOF

kubectl create secret generic grafana-datasources -n monitoring --from-file=./prometheus-datasource.yaml --dry-run -o yaml > grafana-datasources.yaml

kubectl apply -f grafana-datasources.yaml

# kubectl create -f prometheus-monitoring-guide/operator/prometheus-svc.yaml


kubectl delete pod $(kubectl get pods --selector=app.kubernetes.io/name=grafana -n monitoring -o=jsonpath='{.items[0].metadata.name}') -n monitoring

kubectl delete -n monitoring svc prom-operator-grafana

apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/instance: prom-operator
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: grafana
    app.kubernetes.io/version: 6.6.2
    helm.sh/chart: grafana-5.0.5
  name: prom-operator-grafana
  namespace: monitoring
spec:
  ports:
  - name: service
    port: 80
    protocol: TCP
    targetPort: 3000
  selector:
    app.kubernetes.io/instance: prom-operator
    app.kubernetes.io/name: grafana
  sessionAffinity: None
  type: LoadBalancer

--> http://192.168.0.141/login
kubectl patch secret -n monitoring prom-operator-grafana -p='{"data":{"admin-password": "YWRtaW4="}}' -v=1
kubectl get secret --namespace monitoring prom-operator-grafana -o jsonpath="{.data.admin-password}" | base64 --decode ; echo
user = admin
password = admin




apiVersion: v1
kind: ConfigMap
metadata:
  name: cm-grafana-datasources
  namespace: monitoring
data:
  datasource.yaml: |
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://192.168.0.140/
      access: proxy
      isDefault: true


kubectl create configmap cm-grafana-dashboard -n monitoring --from-file=TODOSLOSFICHEROS_JSON





grafana-sc-dashboard
      /tmp/dashboards from sc-dashboard-volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from prom-operator-grafana-token-kwh5x (ro)
grafana-sc-datasources
     /etc/grafana/provisioning/datasources from sc-datasources-volume (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from prom-operator-grafana-token-kwh5x (ro)
grafana
      /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml from sc-dashboard-provider (rw,path="provider.yaml")
      /etc/grafana/provisioning/datasources from sc-datasources-volume (rw)
      /tmp/dashboards from sc-dashboard-volume (rw)
      /var/lib/grafana from storage (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from prom-operator-grafana-token-kwh5x (ro)
------------------------------------------------
    Mounts:
      /etc/grafana/grafana.ini from config (rw,path="grafana.ini")
      /etc/grafana/provisioning/dashboards/sc-dashboardproviders.yaml from sc-dashboard-provider (rw,path="provider.yaml")
      /etc/grafana/provisioning/datasources from sc-datasources-volume (rw)
      /tmp/dashboards from sc-dashboard-volume (rw)
      /var/lib/grafana from storage (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from prom-operator-grafana-token-kwh5x (ro)

Volumes:
  config:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      prom-operator-grafana
    Optional:  false
  storage:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:
    SizeLimit:  <unset>
  sc-dashboard-volume:
    Type:       EmptyDir (a temporary directory that shares a pod's lifetime)
    Medium:
    SizeLimit:  <unset>
  sc-dashboard-provider:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      prom-operator-grafana-config-dashboards
    Optional:  false
  sc-datasources-volume:
    Type:      ConfigMap (a volume populated by a ConfigMap)
    Name:      cm-grafana-datasources
    Optional:  false
  prom-operator-grafana-token-kwh5x:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  prom-operator-grafana-token-kwh5x
    Optional:    false


Volume=sc-datasources-volume
POD=grafana-sc-datasources
PATH=/etc/grafana/provisioning/datasources
FILE=datasource.yaml
apiVersion: 1
datasources:
- name: Prometheus
  type: prometheus
  url: http://192.168.0.140/
  access: proxy
  isDefault: true
-----------------------------------
Volume=sc-dashboard-volume
POD=grafana-sc-dashboard
PATH=/tmp/dashboards
FILE=https://github.com/YvosOnTheHub/LabNetApp/blob/master/Kubernetes_v2/Scenarios/Scenario3/Trident_Dashboard_Std.json





kubectl create configmap game-config-2 --from-file=configure-pod-container/configmap/game.properties --from-file=configure-pod-container/configmap/ui.properties


